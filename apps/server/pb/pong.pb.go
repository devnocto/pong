// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.4
// source: pong.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GameState int32

const (
	GameState_MENU_STATE  GameState = 0
	GameState_PLAY_STATE  GameState = 1
	GameState_PAUSE_STATE GameState = 2
	GameState_STOP_STATE  GameState = 3
)

// Enum value maps for GameState.
var (
	GameState_name = map[int32]string{
		0: "MENU_STATE",
		1: "PLAY_STATE",
		2: "PAUSE_STATE",
		3: "STOP_STATE",
	}
	GameState_value = map[string]int32{
		"MENU_STATE":  0,
		"PLAY_STATE":  1,
		"PAUSE_STATE": 2,
		"STOP_STATE":  3,
	}
)

func (x GameState) Enum() *GameState {
	p := new(GameState)
	*p = x
	return p
}

func (x GameState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameState) Descriptor() protoreflect.EnumDescriptor {
	return file_pong_proto_enumTypes[0].Descriptor()
}

func (GameState) Type() protoreflect.EnumType {
	return &file_pong_proto_enumTypes[0]
}

func (x GameState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameState.Descriptor instead.
func (GameState) EnumDescriptor() ([]byte, []int) {
	return file_pong_proto_rawDescGZIP(), []int{0}
}

type UserInput int32

const (
	UserInput_START_GAME      UserInput = 0
	UserInput_PAUSE_GAME      UserInput = 1
	UserInput_LEFT_UP         UserInput = 2
	UserInput_LEFT_DOWN       UserInput = 3
	UserInput_RIGHT_UP        UserInput = 4
	UserInput_RIGHT_DOWN      UserInput = 5
	UserInput_STOP_LEFT_UP    UserInput = 6
	UserInput_STOP_LEFT_DOWN  UserInput = 7
	UserInput_STOP_RIGHT_UP   UserInput = 8
	UserInput_STOP_RIGHT_DOWN UserInput = 9
	UserInput_RESET_GAME      UserInput = 10
)

// Enum value maps for UserInput.
var (
	UserInput_name = map[int32]string{
		0:  "START_GAME",
		1:  "PAUSE_GAME",
		2:  "LEFT_UP",
		3:  "LEFT_DOWN",
		4:  "RIGHT_UP",
		5:  "RIGHT_DOWN",
		6:  "STOP_LEFT_UP",
		7:  "STOP_LEFT_DOWN",
		8:  "STOP_RIGHT_UP",
		9:  "STOP_RIGHT_DOWN",
		10: "RESET_GAME",
	}
	UserInput_value = map[string]int32{
		"START_GAME":      0,
		"PAUSE_GAME":      1,
		"LEFT_UP":         2,
		"LEFT_DOWN":       3,
		"RIGHT_UP":        4,
		"RIGHT_DOWN":      5,
		"STOP_LEFT_UP":    6,
		"STOP_LEFT_DOWN":  7,
		"STOP_RIGHT_UP":   8,
		"STOP_RIGHT_DOWN": 9,
		"RESET_GAME":      10,
	}
)

func (x UserInput) Enum() *UserInput {
	p := new(UserInput)
	*p = x
	return p
}

func (x UserInput) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserInput) Descriptor() protoreflect.EnumDescriptor {
	return file_pong_proto_enumTypes[1].Descriptor()
}

func (UserInput) Type() protoreflect.EnumType {
	return &file_pong_proto_enumTypes[1]
}

func (x UserInput) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserInput.Descriptor instead.
func (UserInput) EnumDescriptor() ([]byte, []int) {
	return file_pong_proto_rawDescGZIP(), []int{1}
}

type GameConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BallRadius   int32 `protobuf:"varint,1,opt,name=ball_radius,json=ballRadius,proto3" json:"ball_radius,omitempty"`
	PaddleHeight int32 `protobuf:"varint,2,opt,name=paddle_height,json=paddleHeight,proto3" json:"paddle_height,omitempty"`
	PaddleWidth  int32 `protobuf:"varint,3,opt,name=paddle_width,json=paddleWidth,proto3" json:"paddle_width,omitempty"`
	LeftPaddleX  int32 `protobuf:"varint,4,opt,name=left_paddle_x,json=leftPaddleX,proto3" json:"left_paddle_x,omitempty"`
	RightPaddleX int32 `protobuf:"varint,5,opt,name=right_paddle_x,json=rightPaddleX,proto3" json:"right_paddle_x,omitempty"`
	ScreenWidth  int32 `protobuf:"varint,6,opt,name=screen_width,json=screenWidth,proto3" json:"screen_width,omitempty"`
	ScreenHeight int32 `protobuf:"varint,7,opt,name=screen_height,json=screenHeight,proto3" json:"screen_height,omitempty"`
}

func (x *GameConfig) Reset() {
	*x = GameConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pong_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameConfig) ProtoMessage() {}

func (x *GameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pong_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameConfig.ProtoReflect.Descriptor instead.
func (*GameConfig) Descriptor() ([]byte, []int) {
	return file_pong_proto_rawDescGZIP(), []int{0}
}

func (x *GameConfig) GetBallRadius() int32 {
	if x != nil {
		return x.BallRadius
	}
	return 0
}

func (x *GameConfig) GetPaddleHeight() int32 {
	if x != nil {
		return x.PaddleHeight
	}
	return 0
}

func (x *GameConfig) GetPaddleWidth() int32 {
	if x != nil {
		return x.PaddleWidth
	}
	return 0
}

func (x *GameConfig) GetLeftPaddleX() int32 {
	if x != nil {
		return x.LeftPaddleX
	}
	return 0
}

func (x *GameConfig) GetRightPaddleX() int32 {
	if x != nil {
		return x.RightPaddleX
	}
	return 0
}

func (x *GameConfig) GetScreenWidth() int32 {
	if x != nil {
		return x.ScreenWidth
	}
	return 0
}

func (x *GameConfig) GetScreenHeight() int32 {
	if x != nil {
		return x.ScreenHeight
	}
	return 0
}

type StateUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameState    GameState `protobuf:"varint,1,opt,name=game_state,json=gameState,proto3,enum=pong.GameState" json:"game_state,omitempty"`
	BallX        int32     `protobuf:"varint,2,opt,name=ball_x,json=ballX,proto3" json:"ball_x,omitempty"`
	BallY        int32     `protobuf:"varint,3,opt,name=ball_y,json=ballY,proto3" json:"ball_y,omitempty"`
	LeftPaddleY  int32     `protobuf:"varint,4,opt,name=left_paddle_y,json=leftPaddleY,proto3" json:"left_paddle_y,omitempty"`
	RightPaddleY int32     `protobuf:"varint,5,opt,name=right_paddle_y,json=rightPaddleY,proto3" json:"right_paddle_y,omitempty"`
	LeftScore    uint32    `protobuf:"varint,6,opt,name=left_score,json=leftScore,proto3" json:"left_score,omitempty"`
	RightScore   uint32    `protobuf:"varint,7,opt,name=right_score,json=rightScore,proto3" json:"right_score,omitempty"`
}

func (x *StateUpdate) Reset() {
	*x = StateUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pong_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateUpdate) ProtoMessage() {}

func (x *StateUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pong_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateUpdate.ProtoReflect.Descriptor instead.
func (*StateUpdate) Descriptor() ([]byte, []int) {
	return file_pong_proto_rawDescGZIP(), []int{1}
}

func (x *StateUpdate) GetGameState() GameState {
	if x != nil {
		return x.GameState
	}
	return GameState_MENU_STATE
}

func (x *StateUpdate) GetBallX() int32 {
	if x != nil {
		return x.BallX
	}
	return 0
}

func (x *StateUpdate) GetBallY() int32 {
	if x != nil {
		return x.BallY
	}
	return 0
}

func (x *StateUpdate) GetLeftPaddleY() int32 {
	if x != nil {
		return x.LeftPaddleY
	}
	return 0
}

func (x *StateUpdate) GetRightPaddleY() int32 {
	if x != nil {
		return x.RightPaddleY
	}
	return 0
}

func (x *StateUpdate) GetLeftScore() uint32 {
	if x != nil {
		return x.LeftScore
	}
	return 0
}

func (x *StateUpdate) GetRightScore() uint32 {
	if x != nil {
		return x.RightScore
	}
	return 0
}

type UserAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInput UserInput `protobuf:"varint,1,opt,name=user_input,json=userInput,proto3,enum=pong.UserInput" json:"user_input,omitempty"`
	Request   int32     `protobuf:"varint,2,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *UserAction) Reset() {
	*x = UserAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pong_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAction) ProtoMessage() {}

func (x *UserAction) ProtoReflect() protoreflect.Message {
	mi := &file_pong_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAction.ProtoReflect.Descriptor instead.
func (*UserAction) Descriptor() ([]byte, []int) {
	return file_pong_proto_rawDescGZIP(), []int{2}
}

func (x *UserAction) GetUserInput() UserInput {
	if x != nil {
		return x.UserInput
	}
	return UserInput_START_GAME
}

func (x *UserAction) GetRequest() int32 {
	if x != nil {
		return x.Request
	}
	return 0
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//	*Response_Config
	//	*Response_StateUpdate
	//	*Response_UserAction
	Content isResponse_Content `protobuf_oneof:"content"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pong_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_pong_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_pong_proto_rawDescGZIP(), []int{3}
}

func (m *Response) GetContent() isResponse_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Response) GetConfig() *GameConfig {
	if x, ok := x.GetContent().(*Response_Config); ok {
		return x.Config
	}
	return nil
}

func (x *Response) GetStateUpdate() *StateUpdate {
	if x, ok := x.GetContent().(*Response_StateUpdate); ok {
		return x.StateUpdate
	}
	return nil
}

func (x *Response) GetUserAction() *UserAction {
	if x, ok := x.GetContent().(*Response_UserAction); ok {
		return x.UserAction
	}
	return nil
}

type isResponse_Content interface {
	isResponse_Content()
}

type Response_Config struct {
	Config *GameConfig `protobuf:"bytes,1,opt,name=config,proto3,oneof"`
}

type Response_StateUpdate struct {
	StateUpdate *StateUpdate `protobuf:"bytes,2,opt,name=state_update,json=stateUpdate,proto3,oneof"`
}

type Response_UserAction struct {
	UserAction *UserAction `protobuf:"bytes,3,opt,name=user_action,json=userAction,proto3,oneof"`
}

func (*Response_Config) isResponse_Content() {}

func (*Response_StateUpdate) isResponse_Content() {}

func (*Response_UserAction) isResponse_Content() {}

var File_pong_proto protoreflect.FileDescriptor

var file_pong_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x22, 0x87, 0x02, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x61, 0x64, 0x64, 0x6c,
	0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x64, 0x64, 0x6c,
	0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70,
	0x61, 0x64, 0x64, 0x6c, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x65,
	0x66, 0x74, 0x5f, 0x70, 0x61, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x61, 0x64, 0x64, 0x6c, 0x65, 0x58, 0x12, 0x24,
	0x0a, 0x0e, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x61, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x78,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x64,
	0x64, 0x6c, 0x65, 0x58, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xf5, 0x01, 0x0a,
	0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x0a,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6e, 0x67, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x61,
	0x6c, 0x6c, 0x58, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x61, 0x6c, 0x6c, 0x59, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x65,
	0x66, 0x74, 0x5f, 0x70, 0x61, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x61, 0x64, 0x64, 0x6c, 0x65, 0x59, 0x12, 0x24,
	0x0a, 0x0e, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x61, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x64,
	0x64, 0x6c, 0x65, 0x59, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0x56, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6e, 0x67, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xae, 0x01, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x6f, 0x6e, 0x67,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6f,
	0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x6f, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2a, 0x4c, 0x0a,
	0x09, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45,
	0x4e, 0x55, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4c,
	0x41, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x41,
	0x55, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x54, 0x4f, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x03, 0x2a, 0xc3, 0x01, 0x0a, 0x09,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x41, 0x55,
	0x53, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x45, 0x46,
	0x54, 0x5f, 0x55, 0x50, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x44,
	0x4f, 0x57, 0x4e, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x55,
	0x50, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x44, 0x4f, 0x57,
	0x4e, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x45, 0x46, 0x54,
	0x5f, 0x55, 0x50, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x45,
	0x46, 0x54, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x4f,
	0x50, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x55, 0x50, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x54, 0x4f, 0x50, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10,
	0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10,
	0x0a, 0x42, 0x05, 0x5a, 0x03, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pong_proto_rawDescOnce sync.Once
	file_pong_proto_rawDescData = file_pong_proto_rawDesc
)

func file_pong_proto_rawDescGZIP() []byte {
	file_pong_proto_rawDescOnce.Do(func() {
		file_pong_proto_rawDescData = protoimpl.X.CompressGZIP(file_pong_proto_rawDescData)
	})
	return file_pong_proto_rawDescData
}

var file_pong_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pong_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_pong_proto_goTypes = []interface{}{
	(GameState)(0),      // 0: pong.GameState
	(UserInput)(0),      // 1: pong.UserInput
	(*GameConfig)(nil),  // 2: pong.GameConfig
	(*StateUpdate)(nil), // 3: pong.StateUpdate
	(*UserAction)(nil),  // 4: pong.UserAction
	(*Response)(nil),    // 5: pong.Response
}
var file_pong_proto_depIdxs = []int32{
	0, // 0: pong.StateUpdate.game_state:type_name -> pong.GameState
	1, // 1: pong.UserAction.user_input:type_name -> pong.UserInput
	2, // 2: pong.Response.config:type_name -> pong.GameConfig
	3, // 3: pong.Response.state_update:type_name -> pong.StateUpdate
	4, // 4: pong.Response.user_action:type_name -> pong.UserAction
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_pong_proto_init() }
func file_pong_proto_init() {
	if File_pong_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pong_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pong_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pong_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pong_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pong_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Response_Config)(nil),
		(*Response_StateUpdate)(nil),
		(*Response_UserAction)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pong_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pong_proto_goTypes,
		DependencyIndexes: file_pong_proto_depIdxs,
		EnumInfos:         file_pong_proto_enumTypes,
		MessageInfos:      file_pong_proto_msgTypes,
	}.Build()
	File_pong_proto = out.File
	file_pong_proto_rawDesc = nil
	file_pong_proto_goTypes = nil
	file_pong_proto_depIdxs = nil
}
